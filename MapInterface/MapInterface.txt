The Map interface in Java, part of the java.util package, represents a collection of key-value pairs where each key is unique. Unlike List or Set, a Map associates keys with values, making it perfect for quick lookups by specific identifiers.--------------------------------------------------------------------------------------------------------------------
Key Characteristics of a Map
Unique Keys: Each key in a Map must be unique. If you try to insert a duplicate key, the new value will overwrite the existing value for that key.

Values Can Be Duplicates: While keys must be unique, values can be duplicated. Different keys can map to the same value.

Efficient Lookups: Maps allow for fast retrieval of values based on their keys, making them ideal for use cases that require frequent access to elements.
-------------------------------------------------------------------------------------------------------------------
Types of Map Implementations
1. HashMap
Implementation: Uses a hash table internally.

Order: Does not guarantee the order of keys or values.

Performance: Provides constant-time performance for get and put operations.

Use Case: Great for storing data when the order doesn’t matter, such as storing product codes and descriptions.

2. LinkedHashMap
Implementation: Extends HashMap with a linked list running through its entries.

Order: Maintains the order in which keys are inserted.

Performance: Similar to HashMap, but with slightly more overhead due to maintaining order.

Use Case: Useful when you need to maintain the order of insertion, such as tracking the order in which users accessed a resource.

3. TreeMap
Implementation: Uses a tree structure internally (specifically a Red-Black tree).

Order: Keys are sorted in their natural order or by a custom comparator provided at map creation.

Performance: Provides log(n) time complexity for get and put operations.

Use Case: Ideal when you need to store key-value pairs and maintain a sorted order, such as keeping employee records sorted by ID.
------------------------------------------------------------------------------------------------------------------------
When to Use Which Map Implementation?
HashMap: Use when you need fast lookups and don’t care about the order of the keys. It is typically the fastest option for most map operations.

LinkedHashMap: Use when you need fast lookups and also need to maintain the insertion order of keys.

TreeMap: Use when you need sorted keys. It is useful when working with sorted data, such as maintaining student records in sorted order by ID.
-----------------------------------------------------------------------------------------------------------------------
Summary 
HashMap is the most efficient for general purposes when order doesn’t matter.

LinkedHashMap maintains the order of insertion.

TreeMap keeps keys sorted, either in natural order or according to a custom comparator.
------------------------------------------------------------------------------------------------------------------------
