What is Java Collections? 
Java Collections are like containers that allow you to store and manipulate groups of objects efficiently. Instead of managing individual items, you can group them together in lists, sets, maps, or queues and handle them all at once.

-------------------------------------------------------------------------------------------------------------------------------------------------
How the Collections Framework Works ‚öôÔ∏è
Storing Data: You can store various types of data like a list of friends' names, a set of unique roll numbers, or a map of student IDs to their names.

Processing Data: You can loop through all your stored items easily, just like pulling out all your socks from the drawer.

Accessing Data: You can quickly find an item. For example, need a specific book? Collections help you grab it in an instant.
------------------------------------------------------------------------------------------------------------------------------------------------
Core Interfaces of Java Collections üìö

1) List 
A List is an ordered collection (or sequence) of elements where duplicates are allowed. Elements in a list are indexed, which means you can access them by their position in the list.
Example: ArrayList, LinkedList

2) Set 
A Set is a collection that doesn‚Äôt allow duplicate elements. It‚Äôs used when you want to store unique values, and the order of elements may not be important.
Example: HashSet, TreeSet

3) Map 
A Map stores data in key-value pairs, where each key is unique, and it maps to a specific value. It‚Äôs used when you need to look up data based on some identifier.
Example: HashMap, TreeMap

4) Queue 
A Queue is a collection where elements are processed in the order they were added‚Äîfirst in, first out (FIFO). It‚Äôs used when you want to manage tasks in a specific sequence.
Example: PriorityQueue

------------------------------------------------------------------------------------------------------------------------------------------------
Key Points

List:
Ordered collection with duplicates allowed.
Provides index-based access.
Use when order matters, and duplicates are acceptable.

Set:
Unordered collection with no duplicates.
Ideal for storing unique elements.
Fast lookup for existence of elements.

Queue:
Ordered collection based on insertion order or priority.
Follows FIFO principle (unless priority queue is used).
Limited access to elements; primarily head and tail operations.

Java Collections Framework:
Provides standardized interfaces and classes.
Improves code efficiency and readability.
Essential for effective data management in applications.
--------------------------------------------------------------------------------------------------------------------------------------------------
